<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[图片点击出现模态框]]></title>
    <url>%2F2017%2F05%2F06%2F%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E5%87%BA%E7%8E%B0%E6%A8%A1%E6%80%81%E6%A1%86%2F</url>
    <content type="text"><![CDATA[图片点击后出现模态框一.实现思路我们点击小图片之后,图片模态框出现，同时图片模态框上有一个关闭按钮和图片的标题。 因此，我们的实现思路就是： 图片模态框有大图片，关闭按钮，图片标题三部分。 将图片模态框隐藏，在点击小图片之后，模态框出现。 点击关闭按钮后，模态框隐藏。 二.HTML代码首先，我们的原始页面上有一个图片如下： ​ HTML代码如下： &lt;h2&gt;图片点击弹出模态框效果&lt;/h2&gt; &lt;p&gt;图片模态框很不错，是个值得学习的效果&lt;/p&gt; &lt;img src=&quot;star.jpeg&quot; id=&quot;real&quot; alt=&quot;model test picture&quot;&gt;模态框的HTML代码如下： &lt;div class=&quot;motai&quot; id=&quot;mo&quot;&gt; &lt;span class=&quot;close&quot; id=&quot;close&quot;&gt;×&lt;/span&gt; &lt;img class=&quot;motaiimg&quot; id=&quot;moimg&quot;&gt; &lt;div id=&quot;caption&quot;&gt;&lt;/div&gt; &lt;/div&gt; 三.css代码我们需要通过css设置模态框中各元素的表现效果同时将其隐藏起来，具体有如下几步： 1.模态框 1#mo&#123; display: none;/*隐藏模态框*/ width: 100%; height: 100%; position: fixed;/*定位方式为固定定位*/ overflow: auto;/*不滚动*/ background-color: rgba(0,0,0,0.7); top: 0px; left: 0px; z-index: 1;/*置于页面图层之上*/ &#125; 2.关闭按钮 1.close&#123; font-size: 40px; font-weight: bold; position: absolute; top: 20px; right: 14%; color:#f1f1f1; &#125; .close:hover, .close:focus&#123; color:#bbb; cursor:pointer; &#125; 3.模态框中图片 1#moimg&#123; display: block;/*图片表现为块*/ margin:25px auto;/*图片居中对齐*/ width: 60%; max-width: 750px;/*自适应布局*/ &#125; 4.图片标题 1#caption&#123; text-align: center;/*文本居中*/ margin: 15px auto; width: 60%; max-height: 750px; font-size: 20px; color:#ccc; &#125; 以上就是基本的模态框各元素的css代码，如果想实现点击后扩大的动画效果，可以增加以下代码： 1#moimg,#caption&#123; -webkit-animation: first 1s; -o-animation: first 1s; animation: first 1s; &#125; @keyframes first&#123; from&#123;transform: scale(0.1);&#125; to&#123;transform: scale(1);&#125; &#125; 通过以上步骤，我们已经制作好了模态框页面。在使用js来完成交互效果就可以了。 四.js代码js代码主要是图片和关闭按钮的点击交互，需要注意的是js代码须位于模态框HTML代码之后，js具体代码如下，： 12345678910111213var motai=document.getElementById(&apos;mo&apos;);var moimg=document.getElementById(&quot;moimg&quot;); var realimg=document.getElementById(&quot;real&quot;); var caption=document.getElementById(&quot;caption&quot;); realimg.onclick=function()&#123; motai.style.display=&quot;block&quot;; moimg.src=this.src; caption.innerHTML=this.alt; &#125; var span=document.getElementById(&quot;close&quot;); span.onclick=function()&#123; motai.style.display=&quot;none&quot;; &#125; 通过以上步骤，图片的模态框效果就实现了]]></content>
  </entry>
  <entry>
    <title><![CDATA[blog on github set]]></title>
    <url>%2F2017%2F03%2F29%2Fblog-on-github-set%2F</url>
    <content type="text"><![CDATA[github pages + HEXO + 域名绑定1、git的下载与安装 下载git、TortoiseGit、TortoiseGit-LanguagePack(语言包)并安装 2、安装node.js 安装完成后在命令行输入node -v,查看nodejs版本,输入npm -v,查看npm版本 配置环境变量： 在nodejs安装目录下新建两个文件夹node_global、node_cache然后打开cmd窗口输入以下命令 npm config set prefix “D:\Program Files\nodejs\node_global” npm config set cache “D:\Program Files\nodejs\node_cache” 右击我的电脑-属性-高级系统设置-高级-环境变量-新建 变量名：NODE_PSTH 变量值：D:\Program Files\nodejs\node_global\node_modules 编辑用户变量中的Path，将C:\Users\hasee\AppData\Roaming\npm修改为D:\Program Files\nodejs\node_global 配置完成后，安装个module模块测试一下，打开cmd窗口输入npm install express -g #-g表示全局安装，安装完成后打开D:\Program Files\nodejs\node_global\node_modules文件夹，发现里面多了个express文件夹，到这里node.js已经安装完成 3、注册github账号 一、注册GitHub账户前往GitHub官网, 填写相关信息，注册一个账号，加入GitHub的大家庭。GitHub官网：https://github.com/ 1、输入用户名，电子邮箱，登录密码之后，点击【Sign up for GitHub】进行注册，点击后将跳转到下面页面，并且这时候你刚才所填写的邮箱会收到GitHub的验证邮件。 二、设置SSH已经注册了GitHub账号显然是不能够的，还需要其他的一些设置。GitHub上链接已经存在仓库时候的认证，是通过使用SSH的公开密钥认证的。1、检查.ssh文件夹是否存在，windows系统下，这个文件夹是存放在【C:\Users\用户名】下的输入【ls -al ~/.ssh】 回车后出现以下提示，表示找不到【.ssh】文件夹 2、创建公开密钥认证所需的SSH Key输入【ssh-keygen -t rsa -C “your_email@example.com”】 期间有提示输入密码什么的，我都没有输入，直接回车 这个时候【C:\Users\用户名】就会出现【.ssh】文件夹 【.ssh】文件夹里面有两个文件，id_rsa 文件是私有密钥， id_rsa.pub 是公开密钥 3、添加公开密钥在 GitHub 中添加公开密钥，今后就可以用私有密钥进行认证了。点击右上角的账户设定按钮（Account Settings），选择 SSH Keys 菜单。点击 Add SSH Key 之后，会出现输入框。在 Title 中输入适当的密钥名称。 Key 部分请粘贴 id_rsa.pub 文件里的内容。 使用记事本打开【id_rsa.pub】公钥 将公钥内容粘贴到上面的【key】区域中 粘贴后出现红线，没事的，放心点击【Add SSH Key】 4、测试完成以上设置后，就可以用手中的私人密钥与 GitHub 进行认证和通信了。输入【ssh -T git@github.com】 连接成功。三、创建一个新的Repository设置完SSH，是不是就结束了呢，客官且慢，GitHub这边还差一步，就是创建一个新的Repository1、创建仓库点击【+】下拉，选择【New repository】 2、在输入框中输入【github用户名.github.io】切记一定要使用你的GitHub用户名.github.io,如果用了其他的用户名.github.io,在我们使用浏览器访问博客的时候就会出现404错误。切记！切记！切记！ 然后点击【Create repository】 到这里GitHub这边的配置已经基本结束了，接下来就是安装Hexo了。 4、安装hexo npm install hexo -g 安装完成后输入hexo -v查看版本 新建D:\hexo文件夹作为博客根目录，进入hexo文件夹右键选择git bash 输入 hexo init 初始化hexo ​ npm install 安装依赖包 npm install hexo-server –save 若依赖包中已经安装则跳过 npm install hexo-deployer –save 使用git方式部署博客所需插件 hexo new “文章” 新建文章，执行后再source \ _posts目录下会生成一个 文章.md的文件，用markdown编辑器打开编辑后保存 hexo generate ，会生成一个存放静态文件的文件夹public，可简写为hexo g； hexo server 启动本地服务器，简写为hexo s；浏览器中输入http://localhost:4000预览博客 hexo clean 清楚缓存 hexo g -d 生成本地静态文件然后同步到github上 然后就可以在网站上访问博客地址为：github用户名.github.io 域名绑定（第三步，可选） 首先假设你有一个域名并且是可用状态。修改你域名的DNS地址为 f1g1ns1.dnspod.net和f1g1ns2.dnspod.net 然后在你的本地站点目录里的source目录下添加一个CNAME文件，不带后缀 以文本编辑器打开CNAME，里面添加你的域名信息（不加http://） 填写完了之后再重新部署到github pages上（部署简写命令hexo d -g) 域名解析]]></content>
  </entry>
  <entry>
    <title><![CDATA[first]]></title>
    <url>%2F2017%2F03%2F29%2F%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%2F</url>
    <content type="text"><![CDATA[你好，欢迎来到我的个人技术博客！]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F03%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>